
name: Terraform Plan

on:
  workflow_call:
    inputs:
      service-env:
        required: true
        type: string
        
env:
  NPM_EMAIL: ${{ secrets.NPM_EMAIL }}
  NPM_PASSWORD: ${{ secrets.NPM_PASSWORD }}
  NPM_USERNAME: ${{ secrets.NPM_USERNAME }}
jobs:
  Deploy-To:
    environment:
      name: ${{ inputs.service-env }}
    name: Deploy to ${{ inputs.service-env }}
    needs:
      - Test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: arn:aws:iam::494055087689:role/GH_ACTION_BEATS_NEXTJS_REPO
          aws-region: us-east-1
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          if_key_exists: fail
          key: ${{ secrets.SSH_DEPLOY_KEY }}
          known_hosts: github.com
          name: id_rsa
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 0.14.8
          terraform_wrapper: false
      - uses: c-hive/gha-yarn-cache@v2
      - run: git fetch origin main
      - env:
          ENV: ${{ inputs.service-env }}
        name: Install and Deploy
        id: install
        if: ${{ github.event_name == 'pull_request' }}
        run: |-
          yarn install
          NODE_ENV=${{ inputs.service-env }} yarn nx affected --target=build --base=remotes/origin/main HEAD=$GITHUB_REF
          yarn nx affected --target=deploy --base=remotes/origin/main HEAD=$GITHUB_REF --env=${{ inputs.service-env }}
          echo "GITHUB_WEB_DEPLOY=$(npx nx print-affected --base=remotes/origin/main HEAD=$GITHUB_REF --select=projects | tr "," "\n" | grep -x web)" >> $GITHUB_ENV
      - name: Terraform Format
        id: fmt
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "FMT<<$EOF" >> $GITHUB_ENV
          echo "$(terraform fmt -check -no-color -diff)" >> $GITHUB_ENV
          echo "$EOF" >> $GITHUB_ENV
      - name: Check if run project
        if: ${{ (env.GITHUB_WEB_DEPLOY == 'web') && (github.event_name == 'pull_request') }}
        working-directory: ./apps/web
        run: |-
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          terraform init -backend-config="bucket=tf-state-br-nodereport-temp2" -backend-config="key=br-nodereport/development/terraform.tfstate" -backend-config="region=us-east-2"
          terraform plan -var-file="./deploy/"${{ inputs.service-env }}".tfvars" -input=false -no-color -compact-warnings -out=tf.plan
          terraform show -no-color tf.plan 2>&1 > plan.txt
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: ${{ github.event_name == 'pull_request' }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('# Terraform Plan for ${{ inputs.service-env }}')
            })
            const fs = require("fs");
            const plan = fs.readFileSync("/apps/web/plan.txt", "utf8");
            let output = `# Terraform Plan for ${{ inputs.service-env }}
            #### Terraform Plan (may be truncated to 100kbytes)
            <details><summary>Show Plan</summary>
            \`\`\`\n${plan}\n\`\`\`
            </details>
            `;
            if (process.env.FMT) {
              output += `#### Terraform Format
            <details><summary>Show Fmt</summary>
            \`\`\`\n${process.env.FMT}\n\`\`\`
            </details>
            `;
            }
            output += `*Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.service-env }}\`, Workflow: \`${{ github.workflow }}\`*`;
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Apply
        if: ${{ github.event_name == 'push' }}
        working-directory: ./apps/web
        run: echo "terraform apply tf.plan"
  Test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          token: ${{ secrets.GITHUB_TOKEN }}
