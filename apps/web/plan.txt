
An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
  ~ update in-place
  - destroy
-/+ destroy and then create replacement
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_iam_policy_document.my-cdn-cf-policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "my-cdn-cf-policy"  {
      ~ id      = "2261672381" -> (known after apply)
      ~ json    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "s3:GetObject"
                      - Effect    = "Allow"
                      - Principal = {
                          - AWS = "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ES63XVTL7DCLX"
                        }
                      - Resource  = "arn:aws:s3:::development-beats-nextjs/*"
                      - Sid       = "1"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      - version = "2012-10-17" -> null

      ~ statement {
          - effect        = "Allow" -> null
          - not_actions   = [] -> null
          - not_resources = [] -> null
          ~ resources     = [
              - "arn:aws:s3:::development-beats-nextjs/*",
              ~ (known after apply),
            ]
            # (2 unchanged attributes hidden)

            # (1 unchanged block hidden)
        }
    }

  # aws_s3_bucket.beats-nextjs-bucket must be replaced
-/+ resource "aws_s3_bucket" "beats-nextjs-bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      ~ arn                         = "arn:aws:s3:::development-beats-nextjs" -> (known after apply)
      ~ bucket                      = "development-beats-nextjs" -> "dev-beats-nextjs"
      ~ bucket_domain_name          = "development-beats-nextjs.s3.amazonaws.com" -> (known after apply)
      ~ bucket_regional_domain_name = "development-beats-nextjs.s3.amazonaws.com" -> (known after apply)
      ~ hosted_zone_id              = "Z3AQBSTGFYJSTF" -> (known after apply)
      ~ id                          = "development-beats-nextjs" -> (known after apply)
      ~ object_lock_enabled         = false -> (known after apply)
      ~ policy                      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "s3:GetObject"
                      - Effect    = "Allow"
                      - Principal = {
                          - AWS = "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ES63XVTL7DCLX"
                        }
                      - Resource  = "arn:aws:s3:::development-beats-nextjs/*"
                      - Sid       = "1"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      ~ region                      = "us-east-1" -> (known after apply)
      ~ request_payer               = "BucketOwner" -> (known after apply)
      - tags                        = {} -> null
      ~ tags_all                    = {} -> (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
        # (1 unchanged attribute hidden)

      + cors_rule {
          + allowed_headers = (known after apply)
          + allowed_methods = (known after apply)
          + allowed_origins = (known after apply)
          + expose_headers  = (known after apply)
          + max_age_seconds = (known after apply)
        }

      - grant {
          - id          = "c606020a98042b1470ecb961a7b56ad07da9a432eeddecf4eee6a79ec6961d89" -> null
          - permissions = [
              - "FULL_CONTROL",
            ] -> null
          - type        = "CanonicalUser" -> null
        }
      + grant {
          + id          = (known after apply)
          + permissions = (known after apply)
          + type        = (known after apply)
          + uri         = (known after apply)
        }

      + lifecycle_rule {
          + abort_incomplete_multipart_upload_days = (known after apply)
          + enabled                                = (known after apply)
          + id                                     = (known after apply)
          + prefix                                 = (known after apply)
          + tags                                   = (known after apply)

          + expiration {
              + date                         = (known after apply)
              + days                         = (known after apply)
              + expired_object_delete_marker = (known after apply)
            }

          + noncurrent_version_expiration {
              + days = (known after apply)
            }

          + noncurrent_version_transition {
              + days          = (known after apply)
              + storage_class = (known after apply)
            }

          + transition {
              + date          = (known after apply)
              + days          = (known after apply)
              + storage_class = (known after apply)
            }
        }

      + logging {
          + target_bucket = (known after apply)
          + target_prefix = (known after apply)
        }

      + object_lock_configuration {
          + object_lock_enabled = (known after apply)

          + rule {
              + default_retention {
                  + days  = (known after apply)
                  + mode  = (known after apply)
                  + years = (known after apply)
                }
            }
        }

      + replication_configuration {
          + role = (known after apply)

          + rules {
              + delete_marker_replication_status = (known after apply)
              + id                               = (known after apply)
              + prefix                           = (known after apply)
              + priority                         = (known after apply)
              + status                           = (known after apply)

              + destination {
                  + account_id         = (known after apply)
                  + bucket             = (known after apply)
                  + replica_kms_key_id = (known after apply)
                  + storage_class      = (known after apply)

                  + access_control_translation {
                      + owner = (known after apply)
                    }

                  + metrics {
                      + minutes = (known after apply)
                      + status  = (known after apply)
                    }

                  + replication_time {
                      + minutes = (known after apply)
                      + status  = (known after apply)
                    }
                }

              + filter {
                  + prefix = (known after apply)
                  + tags   = (known after apply)
                }

              + source_selection_criteria {
                  + sse_kms_encrypted_objects {
                      + enabled = (known after apply)
                    }
                }
            }
        }

      ~ server_side_encryption_configuration {
          ~ rule {
              ~ bucket_key_enabled = false -> (known after apply)

              ~ apply_server_side_encryption_by_default {
                  + kms_master_key_id = (known after apply)
                  ~ sse_algorithm     = "AES256" -> (known after apply)
                }
            }
        }

      ~ versioning {
          ~ enabled    = false -> (known after apply)
          ~ mfa_delete = false -> (known after apply)
        }

      + website {
          + error_document           = (known after apply)
          + index_document           = (known after apply)
          + redirect_all_requests_to = (known after apply)
          + routing_rules            = (known after apply)
        }
    }

  # aws_s3_bucket_object.dist["BUILD_ID"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ etag                   = "a0a3211fa51e510209a04666d307b223" -> "1fe92d98be4598d55ae8df1be0640065"
      ~ id                     = "BUILD_ID" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/BUILD_ID" -> "deploy/.serverless_nextjs/assets/BUILD_ID"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (5 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["_next/data/6hpnpkMgSJOqFZBUlp0eS/about.json"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "application/json"
      + etag                   = "1379645591a88d5b9dd553d257fb9b9a"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "_next/data/6hpnpkMgSJOqFZBUlp0eS/about.json"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/_next/data/6hpnpkMgSJOqFZBUlp0eS/about.json"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["_next/data/6hpnpkMgSJOqFZBUlp0eS/videos/6182b67ff47455000893d5d1gh.json"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "application/json"
      + etag                   = "3a28abec2322c7814bea2fc489edffe5"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "_next/data/6hpnpkMgSJOqFZBUlp0eS/videos/6182b67ff47455000893d5d1gh.json"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/_next/data/6hpnpkMgSJOqFZBUlp0eS/videos/6182b67ff47455000893d5d1gh.json"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["_next/data/Ql7AeM86YI4yuyOoeDwGA/about.json"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "application/json" -> null
      - etag                   = "1379645591a88d5b9dd553d257fb9b9a" -> null
      - force_destroy          = false -> null
      - id                     = "_next/data/Ql7AeM86YI4yuyOoeDwGA/about.json" -> null
      - key                    = "_next/data/Ql7AeM86YI4yuyOoeDwGA/about.json" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/data/Ql7AeM86YI4yuyOoeDwGA/about.json" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_object.dist["_next/data/Ql7AeM86YI4yuyOoeDwGA/videos/6182b67ff47455000893d5d1gh.json"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "application/json" -> null
      - etag                   = "3a28abec2322c7814bea2fc489edffe5" -> null
      - force_destroy          = false -> null
      - id                     = "_next/data/Ql7AeM86YI4yuyOoeDwGA/videos/6182b67ff47455000893d5d1gh.json" -> null
      - key                    = "_next/data/Ql7AeM86YI4yuyOoeDwGA/videos/6182b67ff47455000893d5d1gh.json" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/data/Ql7AeM86YI4yuyOoeDwGA/videos/6182b67ff47455000893d5d1gh.json" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_object.dist["_next/static/6hpnpkMgSJOqFZBUlp0eS/_buildManifest.js"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "application/javascript"
      + etag                   = "7d98bae0ce9e19b37963ecc88c0e5954"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "_next/static/6hpnpkMgSJOqFZBUlp0eS/_buildManifest.js"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/_next/static/6hpnpkMgSJOqFZBUlp0eS/_buildManifest.js"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["_next/static/6hpnpkMgSJOqFZBUlp0eS/_middlewareManifest.js"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "application/javascript"
      + etag                   = "7c3f7e060745668041278118c0bb3d6d"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "_next/static/6hpnpkMgSJOqFZBUlp0eS/_middlewareManifest.js"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/_next/static/6hpnpkMgSJOqFZBUlp0eS/_middlewareManifest.js"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["_next/static/6hpnpkMgSJOqFZBUlp0eS/_ssgManifest.js"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "application/javascript"
      + etag                   = "594d60bd681cd2e36e7917604c5a3765"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "_next/static/6hpnpkMgSJOqFZBUlp0eS/_ssgManifest.js"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/_next/static/6hpnpkMgSJOqFZBUlp0eS/_ssgManifest.js"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["_next/static/Ql7AeM86YI4yuyOoeDwGA/_buildManifest.js"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "application/javascript" -> null
      - etag                   = "95a56f32bf0e988c6ae9aaa9fd0933ba" -> null
      - force_destroy          = false -> null
      - id                     = "_next/static/Ql7AeM86YI4yuyOoeDwGA/_buildManifest.js" -> null
      - key                    = "_next/static/Ql7AeM86YI4yuyOoeDwGA/_buildManifest.js" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/Ql7AeM86YI4yuyOoeDwGA/_buildManifest.js" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_object.dist["_next/static/Ql7AeM86YI4yuyOoeDwGA/_middlewareManifest.js"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "application/javascript" -> null
      - etag                   = "7c3f7e060745668041278118c0bb3d6d" -> null
      - force_destroy          = false -> null
      - id                     = "_next/static/Ql7AeM86YI4yuyOoeDwGA/_middlewareManifest.js" -> null
      - key                    = "_next/static/Ql7AeM86YI4yuyOoeDwGA/_middlewareManifest.js" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/Ql7AeM86YI4yuyOoeDwGA/_middlewareManifest.js" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_object.dist["_next/static/Ql7AeM86YI4yuyOoeDwGA/_ssgManifest.js"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "application/javascript" -> null
      - etag                   = "594d60bd681cd2e36e7917604c5a3765" -> null
      - force_destroy          = false -> null
      - id                     = "_next/static/Ql7AeM86YI4yuyOoeDwGA/_ssgManifest.js" -> null
      - key                    = "_next/static/Ql7AeM86YI4yuyOoeDwGA/_ssgManifest.js" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/Ql7AeM86YI4yuyOoeDwGA/_ssgManifest.js" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_object.dist["_next/static/chunks/framework-d4c7fbe780b853ea.js"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "_next/static/chunks/framework-d4c7fbe780b853ea.js" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/chunks/framework-d4c7fbe780b853ea.js" -> "deploy/.serverless_nextjs/assets/_next/static/chunks/framework-d4c7fbe780b853ea.js"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["_next/static/chunks/main-15f66ec6222305d1.js"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "_next/static/chunks/main-15f66ec6222305d1.js" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/chunks/main-15f66ec6222305d1.js" -> "deploy/.serverless_nextjs/assets/_next/static/chunks/main-15f66ec6222305d1.js"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["_next/static/chunks/pages/_app-c4b2c13a9bef782b.js"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "_next/static/chunks/pages/_app-c4b2c13a9bef782b.js" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/chunks/pages/_app-c4b2c13a9bef782b.js" -> "deploy/.serverless_nextjs/assets/_next/static/chunks/pages/_app-c4b2c13a9bef782b.js"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["_next/static/chunks/pages/_error-5f79c00932c7c9f1.js"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "_next/static/chunks/pages/_error-5f79c00932c7c9f1.js" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/chunks/pages/_error-5f79c00932c7c9f1.js" -> "deploy/.serverless_nextjs/assets/_next/static/chunks/pages/_error-5f79c00932c7c9f1.js"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["_next/static/chunks/pages/about-2bf33d08e93a2ce8.js"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "application/javascript" -> null
      - etag                   = "b9aea222057cb129f923f571689a05fc" -> null
      - force_destroy          = false -> null
      - id                     = "_next/static/chunks/pages/about-2bf33d08e93a2ce8.js" -> null
      - key                    = "_next/static/chunks/pages/about-2bf33d08e93a2ce8.js" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/chunks/pages/about-2bf33d08e93a2ce8.js" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_object.dist["_next/static/chunks/pages/about-69e459db8ced1251.js"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "application/javascript"
      + etag                   = "68bd119fff2a474c893f768f1a914c23"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "_next/static/chunks/pages/about-69e459db8ced1251.js"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/_next/static/chunks/pages/about-69e459db8ced1251.js"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["_next/static/chunks/pages/index-4c45b77940d9506f.js"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "_next/static/chunks/pages/index-4c45b77940d9506f.js" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/chunks/pages/index-4c45b77940d9506f.js" -> "deploy/.serverless_nextjs/assets/_next/static/chunks/pages/index-4c45b77940d9506f.js"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["_next/static/chunks/pages/videos/[slug]-280c866d06debdbe.js"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "_next/static/chunks/pages/videos/[slug]-280c866d06debdbe.js" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/chunks/pages/videos/[slug]-280c866d06debdbe.js" -> "deploy/.serverless_nextjs/assets/_next/static/chunks/pages/videos/[slug]-280c866d06debdbe.js"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["_next/static/chunks/polyfills-5cd94c89d3acac5f.js"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "_next/static/chunks/polyfills-5cd94c89d3acac5f.js" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/chunks/polyfills-5cd94c89d3acac5f.js" -> "deploy/.serverless_nextjs/assets/_next/static/chunks/polyfills-5cd94c89d3acac5f.js"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["_next/static/chunks/webpack-69bfa6990bb9e155.js"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "_next/static/chunks/webpack-69bfa6990bb9e155.js" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/chunks/webpack-69bfa6990bb9e155.js" -> "deploy/.serverless_nextjs/assets/_next/static/chunks/webpack-69bfa6990bb9e155.js"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["_next/static/css/32d668369076d8cb.css"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "_next/static/css/32d668369076d8cb.css" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/css/32d668369076d8cb.css" -> "deploy/.serverless_nextjs/assets/_next/static/css/32d668369076d8cb.css"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["_next/static/css/ef46db3751d8e999.css"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "_next/static/css/ef46db3751d8e999.css" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/_next/static/css/ef46db3751d8e999.css" -> "deploy/.serverless_nextjs/assets/_next/static/css/ef46db3751d8e999.css"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["public/.gitkeep"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "public/.gitkeep" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/public/.gitkeep" -> "deploy/.serverless_nextjs/assets/public/.gitkeep"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["public/icon-192x192.png"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "public/icon-192x192.png" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/public/icon-192x192.png" -> "deploy/.serverless_nextjs/assets/public/icon-192x192.png"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["public/icon-256x256.png"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "public/icon-256x256.png" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/public/icon-256x256.png" -> "deploy/.serverless_nextjs/assets/public/icon-256x256.png"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["public/icon-384x384.png"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "public/icon-384x384.png" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/public/icon-384x384.png" -> "deploy/.serverless_nextjs/assets/public/icon-384x384.png"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["public/icon-512x512.png"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "public/icon-512x512.png" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/public/icon-512x512.png" -> "deploy/.serverless_nextjs/assets/public/icon-512x512.png"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["public/manifest.json"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "public/manifest.json" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/public/manifest.json" -> "deploy/.serverless_nextjs/assets/public/manifest.json"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["public/sw.js"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ etag                   = "ee7d734bb67ae7c4b4bbcd6a54f27e69" -> "8b1b569f0cbda53c13f581a075b50e8c"
      ~ id                     = "public/sw.js" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/public/sw.js" -> "deploy/.serverless_nextjs/assets/public/sw.js"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (5 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["public/workbox-2780d724.js"] must be replaced
-/+ resource "aws_s3_bucket_object" "dist" {
      ~ bucket                 = "development-beats-nextjs" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ id                     = "public/workbox-2780d724.js" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ source                 = "apps/web/deploy/.serverless_nextjs/assets/public/workbox-2780d724.js" -> "deploy/.serverless_nextjs/assets/public/workbox-2780d724.js"
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (6 unchanged attributes hidden)
    }

  # aws_s3_bucket_object.dist["static-pages/6hpnpkMgSJOqFZBUlp0eS/404.html"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "text/html; charset=utf-8"
      + etag                   = "8751d39f1cfe9d0fb111bd201adc933a"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "static-pages/6hpnpkMgSJOqFZBUlp0eS/404.html"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/static-pages/6hpnpkMgSJOqFZBUlp0eS/404.html"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["static-pages/6hpnpkMgSJOqFZBUlp0eS/about.html"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "text/html; charset=utf-8"
      + etag                   = "73d26746e650a95dae0c3d078c52d361"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "static-pages/6hpnpkMgSJOqFZBUlp0eS/about.html"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/static-pages/6hpnpkMgSJOqFZBUlp0eS/about.html"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["static-pages/6hpnpkMgSJOqFZBUlp0eS/index.html"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "text/html; charset=utf-8"
      + etag                   = "6ac6564bbac821cb038172d40ffe0e0e"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "static-pages/6hpnpkMgSJOqFZBUlp0eS/index.html"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/static-pages/6hpnpkMgSJOqFZBUlp0eS/index.html"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["static-pages/6hpnpkMgSJOqFZBUlp0eS/videos/6182b67ff47455000893d5d1gh.html"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "text/html; charset=utf-8"
      + etag                   = "9d1b4e26c9d07d2bdb01f66d6628664f"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "static-pages/6hpnpkMgSJOqFZBUlp0eS/videos/6182b67ff47455000893d5d1gh.html"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/static-pages/6hpnpkMgSJOqFZBUlp0eS/videos/6182b67ff47455000893d5d1gh.html"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["static-pages/6hpnpkMgSJOqFZBUlp0eS/videos/[slug].html"] will be created
  + resource "aws_s3_bucket_object" "dist" {
      + acl                    = "private"
      + bucket                 = (known after apply)
      + bucket_key_enabled     = (known after apply)
      + cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate"
      + content_type           = "text/html; charset=utf-8"
      + etag                   = "ae0980fda46d5b4d04313446f4f5b87c"
      + force_destroy          = false
      + id                     = (known after apply)
      + key                    = "static-pages/6hpnpkMgSJOqFZBUlp0eS/videos/[slug].html"
      + kms_key_id             = (known after apply)
      + server_side_encryption = (known after apply)
      + source                 = "deploy/.serverless_nextjs/assets/static-pages/6hpnpkMgSJOqFZBUlp0eS/videos/[slug].html"
      + storage_class          = (known after apply)
      + tags_all               = (known after apply)
      + version_id             = (known after apply)
    }

  # aws_s3_bucket_object.dist["static-pages/Ql7AeM86YI4yuyOoeDwGA/404.html"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "text/html; charset=utf-8" -> null
      - etag                   = "a9893997f279323b241103a4a74694e4" -> null
      - force_destroy          = false -> null
      - id                     = "static-pages/Ql7AeM86YI4yuyOoeDwGA/404.html" -> null
      - key                    = "static-pages/Ql7AeM86YI4yuyOoeDwGA/404.html" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/static-pages/Ql7AeM86YI4yuyOoeDwGA/404.html" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_object.dist["static-pages/Ql7AeM86YI4yuyOoeDwGA/about.html"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "text/html; charset=utf-8" -> null
      - etag                   = "30ab5b2136132bb184a52488e45dc4ec" -> null
      - force_destroy          = false -> null
      - id                     = "static-pages/Ql7AeM86YI4yuyOoeDwGA/about.html" -> null
      - key                    = "static-pages/Ql7AeM86YI4yuyOoeDwGA/about.html" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/static-pages/Ql7AeM86YI4yuyOoeDwGA/about.html" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_object.dist["static-pages/Ql7AeM86YI4yuyOoeDwGA/index.html"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "text/html; charset=utf-8" -> null
      - etag                   = "3c38b0e0d9f8b2fb33b93763d619d28e" -> null
      - force_destroy          = false -> null
      - id                     = "static-pages/Ql7AeM86YI4yuyOoeDwGA/index.html" -> null
      - key                    = "static-pages/Ql7AeM86YI4yuyOoeDwGA/index.html" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/static-pages/Ql7AeM86YI4yuyOoeDwGA/index.html" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_object.dist["static-pages/Ql7AeM86YI4yuyOoeDwGA/videos/6182b67ff47455000893d5d1gh.html"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "text/html; charset=utf-8" -> null
      - etag                   = "d344f9e521c42c1d6ad029bc68c9fd3a" -> null
      - force_destroy          = false -> null
      - id                     = "static-pages/Ql7AeM86YI4yuyOoeDwGA/videos/6182b67ff47455000893d5d1gh.html" -> null
      - key                    = "static-pages/Ql7AeM86YI4yuyOoeDwGA/videos/6182b67ff47455000893d5d1gh.html" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/static-pages/Ql7AeM86YI4yuyOoeDwGA/videos/6182b67ff47455000893d5d1gh.html" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_object.dist["static-pages/Ql7AeM86YI4yuyOoeDwGA/videos/[slug].html"] will be destroyed
  - resource "aws_s3_bucket_object" "dist" {
      - acl                    = "private" -> null
      - bucket                 = "development-beats-nextjs" -> null
      - bucket_key_enabled     = false -> null
      - cache_control          = "public, max-age=0, s-maxage=2678400, must-revalidate" -> null
      - content_type           = "text/html; charset=utf-8" -> null
      - etag                   = "3ea87343843356275eba1d832d794195" -> null
      - force_destroy          = false -> null
      - id                     = "static-pages/Ql7AeM86YI4yuyOoeDwGA/videos/[slug].html" -> null
      - key                    = "static-pages/Ql7AeM86YI4yuyOoeDwGA/videos/[slug].html" -> null
      - metadata               = {} -> null
      - server_side_encryption = "AES256" -> null
      - source                 = "apps/web/deploy/.serverless_nextjs/assets/static-pages/Ql7AeM86YI4yuyOoeDwGA/videos/[slug].html" -> null
      - storage_class          = "STANDARD" -> null
      - tags                   = {} -> null
      - tags_all               = {} -> null
    }

  # aws_s3_bucket_policy.cdn-cf-policy must be replaced
-/+ resource "aws_s3_bucket_policy" "cdn-cf-policy" {
      ~ bucket = "development-beats-nextjs" -> (known after apply)
      ~ id     = "development-beats-nextjs" -> (known after apply)
      ~ policy = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "s3:GetObject"
                      - Effect    = "Allow"
                      - Principal = {
                          - AWS = "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ES63XVTL7DCLX"
                        }
                      - Resource  = "arn:aws:s3:::development-beats-nextjs/*"
                      - Sid       = "1"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
    }

  # module.cloudfront_s3.data.aws_iam_policy_document.lambda_s3_sqs will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "lambda_s3_sqs"  {
      ~ id      = "4041986497" -> (known after apply)
      ~ json    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "s3:PutObject",
                          - "s3:GetObject",
                        ]
                      - Effect   = "Allow"
                      - Resource = "arn:aws:s3:::development-beats-nextjs/*"
                      - Sid      = ""
                    },
                  - {
                      - Action   = [
                          - "sqs:SendMessage",
                          - "sqs:ReceiveMessage",
                          - "sqs:GetQueueAttributes",
                          - "sqs:DeleteMessage",
                        ]
                      - Effect   = "Allow"
                      - Resource = "arn:aws:sqs:us-east-1:494055087689:development-regeneration-nextjs.fifo"
                      - Sid      = ""
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      - version = "2012-10-17" -> null

      ~ statement {
          - effect        = "Allow" -> null
          - not_actions   = [] -> null
          - not_resources = [] -> null
          ~ resources     = [
              - "arn:aws:s3:::development-beats-nextjs/*",
              ~ (known after apply),
            ]
            # (1 unchanged attribute hidden)
        }
      ~ statement {
          - effect        = "Allow" -> null
          - not_actions   = [] -> null
          - not_resources = [] -> null
          ~ resources     = [
              - "arn:aws:sqs:us-east-1:494055087689:development-regeneration-nextjs.fifo",
              ~ (known after apply),
            ]
            # (1 unchanged attribute hidden)
        }
    }

  # module.cloudfront_s3.aws_cloudfront_distribution.cdn will be updated in-place
  ~ resource "aws_cloudfront_distribution" "cdn" {
      ~ aliases                        = [
          + "dev.beatsnext.com",
          - "development.beatsnext.com",
        ]
        id                             = "E291UV908166QD"
        tags                           = {}
        # (17 unchanged attributes hidden)

      ~ default_cache_behavior {
          ~ allowed_methods        = [
              - "DELETE",
              - "GET",
              - "HEAD",
              - "OPTIONS",
              - "PATCH",
              - "POST",
              - "PUT",
            ] -> (known after apply)
          ~ cached_methods         = [
              - "GET",
              - "HEAD",
            ] -> (known after apply)
          ~ compress               = true -> (known after apply)
          ~ default_ttl            = 3600 -> (known after apply)
          ~ max_ttl                = 86400 -> (known after apply)
          ~ min_ttl                = 0 -> (known after apply)
          ~ target_origin_id       = "development.beatsnext.com" -> (known after apply)
          ~ viewer_protocol_policy = "redirect-to-https" -> (known after apply)
            # (3 unchanged attributes hidden)

          ~ forwarded_values {
              ~ query_string            = true -> (known after apply)
                # (2 unchanged attributes hidden)

              ~ cookies {
                  ~ forward           = "none" -> (known after apply)
                    # (1 unchanged attribute hidden)
                }
            }

          - lambda_function_association {
              - event_type   = "origin-request" -> null
              - include_body = true -> null
              - lambda_arn   = "arn:aws:lambda:us-east-1:494055087689:function:development_default_path:3" -> null
            }
          - lambda_function_association {
              - event_type   = "origin-response" -> null
              - include_body = false -> null
              - lambda_arn   = "arn:aws:lambda:us-east-1:494055087689:function:development_default_path:3" -> null
            }
          + lambda_function_association {
              + event_type   = (known after apply)
              + include_body = (known after apply)
              + lambda_arn   = (known after apply)
            }
          + lambda_function_association {
              + event_type   = (known after apply)
              + include_body = (known after apply)
              + lambda_arn   = (known after apply)
            }
        }

      ~ ordered_cache_behavior {
          ~ target_origin_id       = "development.beatsnext.com" -> "dev.beatsnext.com"
            # (11 unchanged attributes hidden)

            # (1 unchanged block hidden)
        }
      ~ ordered_cache_behavior {
          ~ target_origin_id       = "development.beatsnext.com" -> "dev.beatsnext.com"
            # (11 unchanged attributes hidden)

            # (1 unchanged block hidden)
        }
      ~ ordered_cache_behavior {
          ~ allowed_methods        = [
              - "GET",
              - "HEAD",
            ] -> (known after apply)
          ~ cached_methods         = [
              - "GET",
              - "HEAD",
            ] -> (known after apply)
          ~ compress               = true -> (known after apply)
          ~ path_pattern           = "_next/data/*" -> (known after apply)
          ~ target_origin_id       = "development.beatsnext.com" -> (known after apply)
          ~ viewer_protocol_policy = "https-only" -> (known after apply)
            # (6 unchanged attributes hidden)

          ~ forwarded_values {
              ~ query_string            = true -> (known after apply)
                # (2 unchanged attributes hidden)

              ~ cookies {
                  ~ forward           = "all" -> (known after apply)
                    # (1 unchanged attribute hidden)
                }
            }

          - lambda_function_association {
              - event_type   = "origin-request" -> null
              - include_body = true -> null
              - lambda_arn   = "arn:aws:lambda:us-east-1:494055087689:function:development_default_path:3" -> null
            }
          - lambda_function_association {
              - event_type   = "origin-response" -> null
              - include_body = false -> null
              - lambda_arn   = "arn:aws:lambda:us-east-1:494055087689:function:development_default_path:3" -> null
            }
          + lambda_function_association {
              + event_type   = (known after apply)
              + include_body = (known after apply)
              + lambda_arn   = (known after apply)
            }
          + lambda_function_association {
              + event_type   = (known after apply)
              + include_body = (known after apply)
              + lambda_arn   = (known after apply)
            }
        }
      ~ ordered_cache_behavior {
          ~ allowed_methods        = [
              - "DELETE",
              - "GET",
              - "HEAD",
              - "OPTIONS",
              - "PATCH",
              - "POST",
              - "PUT",
            ] -> (known after apply)
          ~ cached_methods         = [
              - "GET",
              - "HEAD",
            ] -> (known after apply)
          ~ compress               = true -> (known after apply)
          ~ default_ttl            = 3600 -> (known after apply)
          ~ max_ttl                = 86400 -> (known after apply)
          ~ min_ttl                = 0 -> (known after apply)
          ~ path_pattern           = "api/*" -> (known after apply)
          ~ target_origin_id       = "development.beatsnext.com" -> (known after apply)
          ~ viewer_protocol_policy = "https-only" -> (known after apply)
            # (3 unchanged attributes hidden)

          ~ forwarded_values {
              ~ query_string            = true -> (known after apply)
                # (2 unchanged attributes hidden)

              ~ cookies {
                  ~ forward           = "all" -> (known after apply)
                    # (1 unchanged attribute hidden)
                }
            }

          - lambda_function_association {
              - event_type   = "origin-request" -> null
              - include_body = true -> null
              - lambda_arn   = "arn:aws:lambda:us-east-1:494055087689:function:development_api_path:3" -> null
            }
          + lambda_function_association {
              + event_type   = (known after apply)
              + include_body = (known after apply)
              + lambda_arn   = (known after apply)
            }
        }
      + ordered_cache_behavior {
          + allowed_methods        = (known after apply)
          + cached_methods         = (known after apply)
          + compress               = (known after apply)
          + default_ttl            = (known after apply)
          + max_ttl                = (known after apply)
          + min_ttl                = (known after apply)
          + path_pattern           = (known after apply)
          + target_origin_id       = (known after apply)
          + viewer_protocol_policy = (known after apply)

          + forwarded_values {
              + headers                 = (known after apply)
              + query_string            = (known after apply)
              + query_string_cache_keys = (known after apply)

              + cookies {
                  + forward = (known after apply)
                }
            }

          + lambda_function_association {
              + event_type   = (known after apply)
              + include_body = (known after apply)
              + lambda_arn   = (known after apply)
            }
        }

      - origin {
          - connection_attempts = 3 -> null
          - connection_timeout  = 10 -> null
          - domain_name         = "development-beats-nextjs.s3.amazonaws.com" -> null
          - origin_id           = "development.beatsnext.com" -> null

          - s3_origin_config {
              - origin_access_identity = "origin-access-identity/cloudfront/ES63XVTL7DCLX" -> null
            }
        }
      + origin {
          + connection_attempts = 3
          + connection_timeout  = 10
          + domain_name         = (known after apply)
          + origin_id           = "dev.beatsnext.com"

          + s3_origin_config {
              + origin_access_identity = "origin-access-identity/cloudfront/ES63XVTL7DCLX"
            }
        }


        # (2 unchanged blocks hidden)
    }

  # module.cloudfront_s3.aws_iam_policy.lambda_s3_sqs must be replaced
-/+ resource "aws_iam_policy" "lambda_s3_sqs" {
      ~ arn         = "arn:aws:iam::494055087689:policy/development-lambda-s3-sqs-permissions" -> (known after apply)
      ~ id          = "arn:aws:iam::494055087689:policy/development-lambda-s3-sqs-permissions" -> (known after apply)
      ~ name        = "development-lambda-s3-sqs-permissions" -> "dev-lambda-s3-sqs-permissions"
      ~ policy      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "s3:PutObject",
                          - "s3:GetObject",
                        ]
                      - Effect   = "Allow"
                      - Resource = "arn:aws:s3:::development-beats-nextjs/*"
                      - Sid      = ""
                    },
                  - {
                      - Action   = [
                          - "sqs:SendMessage",
                          - "sqs:ReceiveMessage",
                          - "sqs:GetQueueAttributes",
                          - "sqs:DeleteMessage",
                        ]
                      - Effect   = "Allow"
                      - Resource = "arn:aws:sqs:us-east-1:494055087689:development-regeneration-nextjs.fifo"
                      - Sid      = ""
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      ~ policy_id   = "ANPAXGB72LZE66XB7Z3YF" -> (known after apply)
      - tags        = {} -> null
      ~ tags_all    = {} -> (known after apply)
        # (2 unchanged attributes hidden)
    }

  # module.cloudfront_s3.aws_iam_role.default_lambda_exec must be replaced
-/+ resource "aws_iam_role" "default_lambda_exec" {
      ~ arn                   = "arn:aws:iam::494055087689:role/development-LambdaRscExecRole" -> (known after apply)
      ~ create_date           = "2023-03-22T19:52:00Z" -> (known after apply)
      ~ id                    = "development-LambdaRscExecRole" -> (known after apply)
      ~ managed_policy_arns   = [
          - "arn:aws:iam::494055087689:policy/development-lambda-s3-sqs-permissions",
          - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
        ] -> (known after apply)
      ~ name                  = "development-LambdaRscExecRole" -> "dev-LambdaRscExecRole"
      + name_prefix           = (known after apply)
      - tags                  = {} -> null
      ~ tags_all              = {} -> (known after apply)
      ~ unique_id             = "AROAXGB72LZEUT3SR4RHW" -> (known after apply)
        # (4 unchanged attributes hidden)

      + inline_policy {
          + name   = (known after apply)
          + policy = (known after apply)
        }
    }

  # module.cloudfront_s3.aws_iam_role_policy_attachment.attach-s3-sqs must be replaced
-/+ resource "aws_iam_role_policy_attachment" "attach-s3-sqs" {
      ~ id         = "development-LambdaRscExecRole-20230322195226333900000002" -> (known after apply)
      ~ policy_arn = "arn:aws:iam::494055087689:policy/development-lambda-s3-sqs-permissions" -> (known after apply)
      ~ role       = "development-LambdaRscExecRole" -> "dev-LambdaRscExecRole"
    }

  # module.cloudfront_s3.aws_iam_role_policy_attachment.default_lambda_policy must be replaced
-/+ resource "aws_iam_role_policy_attachment" "default_lambda_policy" {
      ~ id         = "development-LambdaRscExecRole-20230322195200596500000001" -> (known after apply)
      ~ role       = "development-LambdaRscExecRole" -> "dev-LambdaRscExecRole"
        # (1 unchanged attribute hidden)
    }

  # module.cloudfront_s3.aws_route53_record.cloudfront_alias_domain must be replaced
-/+ resource "aws_route53_record" "cloudfront_alias_domain" {
      + allow_overwrite                  = (known after apply)
      ~ fqdn                             = "development.beatsnext.com" -> (known after apply)
      ~ id                               = "Z06628972TBI5UV1L9HS7_development.beatsnext.com_A" -> (known after apply)
      - multivalue_answer_routing_policy = false -> null
      ~ name                             = "development.beatsnext.com" -> "dev.beatsnext.com"
      - records                          = [] -> null
      - ttl                              = 0 -> null
        # (2 unchanged attributes hidden)

        # (1 unchanged block hidden)
    }

  # module.cloudfront_s3.aws_s3_bucket.lambda_bucket must be replaced
-/+ resource "aws_s3_bucket" "lambda_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      ~ arn                         = "arn:aws:s3:::development-lambda-bucket-beatsnext" -> (known after apply)
      ~ bucket                      = "development-lambda-bucket-beatsnext" -> "dev-lambda-bucket-beatsnext"
      ~ bucket_domain_name          = "development-lambda-bucket-beatsnext.s3.amazonaws.com" -> (known after apply)
      ~ bucket_regional_domain_name = "development-lambda-bucket-beatsnext.s3.amazonaws.com" -> (known after apply)
      ~ hosted_zone_id              = "Z3AQBSTGFYJSTF" -> (known after apply)
      ~ id                          = "development-lambda-bucket-beatsnext" -> (known after apply)
      ~ object_lock_enabled         = false -> (known after apply)
      + policy                      = (known after apply)
      ~ region                      = "us-east-1" -> (known after apply)
      ~ request_payer               = "BucketOwner" -> (known after apply)
      - tags                        = {} -> null
      ~ tags_all                    = {} -> (known after apply)
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)
        # (1 unchanged attribute hidden)

      + cors_rule {
          + allowed_headers = (known after apply)
          + allowed_methods = (known after apply)
          + allowed_origins = (known after apply)
          + expose_headers  = (known after apply)
          + max_age_seconds = (known after apply)
        }

      - grant {
          - id          = "c606020a98042b1470ecb961a7b56ad07da9a432eeddecf4eee6a79ec6961d89" -> null
          - permissions = [
              - "FULL_CONTROL",
            ] -> null
          - type        = "CanonicalUser" -> null
        }
      + grant {
          + id          = (known after apply)
          + permissions = (known after apply)
          + type        = (known after apply)
          + uri         = (known after apply)
        }

      + lifecycle_rule {
          + abort_incomplete_multipart_upload_days = (known after apply)
          + enabled                                = (known after apply)
          + id                                     = (known after apply)
          + prefix                                 = (known after apply)
          + tags                                   = (known after apply)

          + expiration {
              + date                         = (known after apply)
              + days                         = (known after apply)
              + expired_object_delete_marker = (known after apply)
            }

          + noncurrent_version_expiration {
              + days = (known after apply)
            }

          + noncurrent_version_transition {
              + days          = (known after apply)
              + storage_class = (known after apply)
            }

          + transition {
              + date          = (known after apply)
              + days          = (known after apply)
              + storage_class = (known after apply)
            }
        }

      + logging {
          + target_bucket = (known after apply)
          + target_prefix = (known after apply)
        }

      + object_lock_configuration {
          + object_lock_enabled = (known after apply)

          + rule {
              + default_retention {
                  + days  = (known after apply)
                  + mode  = (known after apply)
                  + years = (known after apply)
                }
            }
        }

      + replication_configuration {
          + role = (known after apply)

          + rules {
              + delete_marker_replication_status = (known after apply)
              + id                               = (known after apply)
              + prefix                           = (known after apply)
              + priority                         = (known after apply)
              + status                           = (known after apply)

              + destination {
                  + account_id         = (known after apply)
                  + bucket             = (known after apply)
                  + replica_kms_key_id = (known after apply)
                  + storage_class      = (known after apply)

                  + access_control_translation {
                      + owner = (known after apply)
                    }

                  + metrics {
                      + minutes = (known after apply)
                      + status  = (known after apply)
                    }

                  + replication_time {
                      + minutes = (known after apply)
                      + status  = (known after apply)
                    }
                }

              + filter {
                  + prefix = (known after apply)
                  + tags   = (known after apply)
                }

              + source_selection_criteria {
                  + sse_kms_encrypted_objects {
                      + enabled = (known after apply)
                    }
                }
            }
        }

      ~ server_side_encryption_configuration {
          ~ rule {
              ~ bucket_key_enabled = false -> (known after apply)

              ~ apply_server_side_encryption_by_default {
                  + kms_master_key_id = (known after apply)
                  ~ sse_algorithm     = "AES256" -> (known after apply)
                }
            }
        }

      ~ versioning {
          ~ enabled    = false -> (known after apply)
          ~ mfa_delete = false -> (known after apply)
        }

      + website {
          + error_document           = (known after apply)
          + index_document           = (known after apply)
          + redirect_all_requests_to = (known after apply)
          + routing_rules            = (known after apply)
        }
    }

  # module.cloudfront_s3.aws_s3_bucket_public_access_block.lambda_bucket must be replaced
-/+ resource "aws_s3_bucket_public_access_block" "lambda_bucket" {
      ~ bucket                  = "development-lambda-bucket-beatsnext" -> (known after apply)
      ~ id                      = "development-lambda-bucket-beatsnext" -> (known after apply)
        # (4 unchanged attributes hidden)
    }

  # module.cloudfront_s3.aws_sqs_queue.sqs_default_queue must be replaced
-/+ resource "aws_sqs_queue" "sqs_default_queue" {
      ~ arn                               = "arn:aws:sqs:us-east-1:494055087689:development-regeneration-nextjs.fifo" -> (known after apply)
      ~ id                                = "https://sqs.us-east-1.amazonaws.com/494055087689/development-regeneration-nextjs.fifo" -> (known after apply)
      ~ kms_data_key_reuse_period_seconds = 300 -> (known after apply)
      ~ name                              = "development-regeneration-nextjs.fifo" -> "dev-regeneration-nextjs.fifo"
      + name_prefix                       = (known after apply)
      + policy                            = (known after apply)
      + redrive_allow_policy              = (known after apply)
      + redrive_policy                    = (known after apply)
      ~ sqs_managed_sse_enabled           = true -> (known after apply)
      - tags                              = {} -> null
      ~ tags_all                          = {} -> (known after apply)
      ~ url                               = "https://sqs.us-east-1.amazonaws.com/494055087689/development-regeneration-nextjs.fifo" -> (known after apply)
        # (9 unchanged attributes hidden)
    }

  # module.cloudfront_s3.module.lambdas["api"].aws_cloudwatch_log_group.default_lambda[0] must be replaced
-/+ resource "aws_cloudwatch_log_group" "default_lambda" {
      ~ arn               = "arn:aws:logs:us-east-1:494055087689:log-group:/aws/lambda/development_api_path" -> (known after apply)
      ~ id                = "/aws/lambda/development_api_path" -> (known after apply)
      ~ name              = "/aws/lambda/development_api_path" -> "/aws/lambda/dev_api_path"
      + name_prefix       = (known after apply)
      - tags              = {} -> null
      ~ tags_all          = {} -> (known after apply)
        # (2 unchanged attributes hidden)
    }

  # module.cloudfront_s3.module.lambdas["api"].aws_lambda_function.default_path[0] must be replaced
-/+ resource "aws_lambda_function" "default_path" {
      ~ architectures                  = [
          - "x86_64",
        ] -> (known after apply)
      ~ arn                            = "arn:aws:lambda:us-east-1:494055087689:function:development_api_path" -> (known after apply)
      ~ function_name                  = "development_api_path" -> "dev_api_path"
      ~ id                             = "development_api_path" -> (known after apply)
      ~ invoke_arn                     = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:494055087689:function:development_api_path/invocations" -> (known after apply)
      ~ last_modified                  = "2023-03-23T00:27:28.000+0000" -> (known after apply)
      - layers                         = [] -> null
      ~ qualified_arn                  = "arn:aws:lambda:us-east-1:494055087689:function:development_api_path:3" -> (known after apply)
      ~ qualified_invoke_arn           = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:494055087689:function:development_api_path:3/invocations" -> (known after apply)
      ~ role                           = "arn:aws:iam::494055087689:role/development-LambdaRscExecRole" -> (known after apply)
      ~ s3_bucket                      = "development-lambda-bucket-beatsnext" -> (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      ~ source_code_hash               = "Hb9dc6M1mS4lfClkCexTMSZulWvurYcJoIulxavQDw4=" -> "e4rEJy++1uhoNmPa16AEtxcKZXmQCdAJgX+0/7uAKtQ="
      ~ source_code_size               = 1282730 -> (known after apply)
      - tags                           = {} -> null
      ~ tags_all                       = {} -> (known after apply)
      ~ version                        = "3" -> (known after apply)
        # (9 unchanged attributes hidden)

      ~ ephemeral_storage {
          ~ size = 512 -> (known after apply)
        }

      ~ tracing_config {
          ~ mode = "PassThrough" -> (known after apply)
        }
    }

  # module.cloudfront_s3.module.lambdas["api"].aws_s3_object.lambda_default must be replaced
-/+ resource "aws_s3_object" "lambda_default" {
      ~ bucket                 = "development-lambda-bucket-beatsnext" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ content_type           = "binary/octet-stream" -> (known after apply)
      ~ etag                   = "407fbbd306ec54b813c4e3b0457ac16b" -> "42a9fc1414becd85dd9e54db82fec9ee"
      ~ id                     = "api_path.zip" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (4 unchanged attributes hidden)
    }

  # module.cloudfront_s3.module.lambdas["default"].aws_cloudwatch_log_group.default_lambda[0] must be replaced
-/+ resource "aws_cloudwatch_log_group" "default_lambda" {
      ~ arn               = "arn:aws:logs:us-east-1:494055087689:log-group:/aws/lambda/development_default_path" -> (known after apply)
      ~ id                = "/aws/lambda/development_default_path" -> (known after apply)
      ~ name              = "/aws/lambda/development_default_path" -> "/aws/lambda/dev_default_path"
      + name_prefix       = (known after apply)
      - tags              = {} -> null
      ~ tags_all          = {} -> (known after apply)
        # (2 unchanged attributes hidden)
    }

  # module.cloudfront_s3.module.lambdas["default"].aws_lambda_function.default_path[0] must be replaced
-/+ resource "aws_lambda_function" "default_path" {
      ~ architectures                  = [
          - "x86_64",
        ] -> (known after apply)
      ~ arn                            = "arn:aws:lambda:us-east-1:494055087689:function:development_default_path" -> (known after apply)
      ~ function_name                  = "development_default_path" -> "dev_default_path"
      ~ id                             = "development_default_path" -> (known after apply)
      ~ invoke_arn                     = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:494055087689:function:development_default_path/invocations" -> (known after apply)
      ~ last_modified                  = "2023-03-23T00:27:28.000+0000" -> (known after apply)
      - layers                         = [] -> null
      ~ qualified_arn                  = "arn:aws:lambda:us-east-1:494055087689:function:development_default_path:3" -> (known after apply)
      ~ qualified_invoke_arn           = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:494055087689:function:development_default_path:3/invocations" -> (known after apply)
      ~ role                           = "arn:aws:iam::494055087689:role/development-LambdaRscExecRole" -> (known after apply)
      ~ s3_bucket                      = "development-lambda-bucket-beatsnext" -> (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      ~ source_code_hash               = "TTWIJV4WXXVLSutTGEDsrEe5tigteo2WdX0WXDxhzJ8=" -> "4usJJmCkF1PsxObsJwauUF7xuOZTIwpJgEl52Pc1/nQ="
      ~ source_code_size               = 1474691 -> (known after apply)
      - tags                           = {} -> null
      ~ tags_all                       = {} -> (known after apply)
      ~ version                        = "3" -> (known after apply)
        # (9 unchanged attributes hidden)

      ~ ephemeral_storage {
          ~ size = 512 -> (known after apply)
        }

      ~ tracing_config {
          ~ mode = "PassThrough" -> (known after apply)
        }
    }

  # module.cloudfront_s3.module.lambdas["default"].aws_s3_object.lambda_default must be replaced
-/+ resource "aws_s3_object" "lambda_default" {
      ~ bucket                 = "development-lambda-bucket-beatsnext" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ content_type           = "binary/octet-stream" -> (known after apply)
      ~ etag                   = "a356252d9536971ebd4dd21ddc777ea5" -> "453a20677e818c12f5c4c6e33f720516"
      ~ id                     = "default_path.zip" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (4 unchanged attributes hidden)
    }

  # module.cloudfront_s3.module.lambdas["image"].aws_s3_object.lambda_default must be replaced
-/+ resource "aws_s3_object" "lambda_default" {
      ~ bucket                 = "development-lambda-bucket-beatsnext" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ content_type           = "binary/octet-stream" -> (known after apply)
      ~ id                     = "image_path.zip" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (5 unchanged attributes hidden)
    }

  # module.cloudfront_s3.module.lambdas["regeneration"].aws_cloudwatch_log_group.default_lambda[0] must be replaced
-/+ resource "aws_cloudwatch_log_group" "default_lambda" {
      ~ arn               = "arn:aws:logs:us-east-1:494055087689:log-group:/aws/lambda/development_regeneration_path" -> (known after apply)
      ~ id                = "/aws/lambda/development_regeneration_path" -> (known after apply)
      ~ name              = "/aws/lambda/development_regeneration_path" -> "/aws/lambda/dev_regeneration_path"
      + name_prefix       = (known after apply)
      - tags              = {} -> null
      ~ tags_all          = {} -> (known after apply)
        # (2 unchanged attributes hidden)
    }

  # module.cloudfront_s3.module.lambdas["regeneration"].aws_lambda_event_source_mapping.event_source_mapping[0] must be replaced
-/+ resource "aws_lambda_event_source_mapping" "event_source_mapping" {
      - bisect_batch_on_function_error     = false -> null
      ~ event_source_arn                   = "arn:aws:sqs:us-east-1:494055087689:development-regeneration-nextjs.fifo" -> (known after apply)
      ~ function_arn                       = "arn:aws:lambda:us-east-1:494055087689:function:development_regeneration_path" -> (known after apply)
      ~ function_name                      = "arn:aws:lambda:us-east-1:494055087689:function:development_regeneration_path" -> (known after apply)
      - function_response_types            = [] -> null
      ~ id                                 = "a1935af8-630c-4290-89fa-6d6dad59c55d" -> (known after apply)
      ~ last_modified                      = "2023-03-22T19:52:43Z" -> (known after apply)
      + last_processing_result             = (known after apply)
      - maximum_batching_window_in_seconds = 0 -> null
      ~ maximum_record_age_in_seconds      = 0 -> (known after apply)
      ~ maximum_retry_attempts             = 0 -> (known after apply)
      ~ parallelization_factor             = 0 -> (known after apply)
      - queues                             = [] -> null
      ~ state                              = "Enabled" -> (known after apply)
      ~ state_transition_reason            = "USER_INITIATED" -> (known after apply)
      - topics                             = [] -> null
      - tumbling_window_in_seconds         = 0 -> null
      ~ uuid                               = "a1935af8-630c-4290-89fa-6d6dad59c55d" -> (known after apply)
        # (2 unchanged attributes hidden)

      + amazon_managed_kafka_event_source_config {
          + consumer_group_id = (known after apply)
        }

      + self_managed_kafka_event_source_config {
          + consumer_group_id = (known after apply)
        }
    }

  # module.cloudfront_s3.module.lambdas["regeneration"].aws_lambda_function.default_path[0] must be replaced
-/+ resource "aws_lambda_function" "default_path" {
      ~ architectures                  = [
          - "x86_64",
        ] -> (known after apply)
      ~ arn                            = "arn:aws:lambda:us-east-1:494055087689:function:development_regeneration_path" -> (known after apply)
      ~ function_name                  = "development_regeneration_path" -> "dev_regeneration_path"
      ~ id                             = "development_regeneration_path" -> (known after apply)
      ~ invoke_arn                     = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:494055087689:function:development_regeneration_path/invocations" -> (known after apply)
      ~ last_modified                  = "2023-03-23T00:27:28.000+0000" -> (known after apply)
      - layers                         = [] -> null
      ~ qualified_arn                  = "arn:aws:lambda:us-east-1:494055087689:function:development_regeneration_path:3" -> (known after apply)
      ~ qualified_invoke_arn           = "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:494055087689:function:development_regeneration_path:3/invocations" -> (known after apply)
      ~ role                           = "arn:aws:iam::494055087689:role/development-LambdaRscExecRole" -> (known after apply)
      ~ s3_bucket                      = "development-lambda-bucket-beatsnext" -> (known after apply)
      + signing_job_arn                = (known after apply)
      + signing_profile_version_arn    = (known after apply)
      ~ source_code_hash               = "It//HVnKhov7E2Gi2TiCcwoih0kfVwu8ZkNfghCAgFE=" -> "rnBq+kByPo4uRUKbj9HzN2bKrOi8hX6FQk/Cd4D5Deg="
      ~ source_code_size               = 1399966 -> (known after apply)
      - tags                           = {} -> null
      ~ tags_all                       = {} -> (known after apply)
      ~ version                        = "3" -> (known after apply)
        # (9 unchanged attributes hidden)

      ~ ephemeral_storage {
          ~ size = 512 -> (known after apply)
        }

      ~ tracing_config {
          ~ mode = "PassThrough" -> (known after apply)
        }
    }

  # module.cloudfront_s3.module.lambdas["regeneration"].aws_s3_object.lambda_default must be replaced
-/+ resource "aws_s3_object" "lambda_default" {
      ~ bucket                 = "development-lambda-bucket-beatsnext" -> (known after apply)
      ~ bucket_key_enabled     = false -> (known after apply)
      ~ content_type           = "binary/octet-stream" -> (known after apply)
      ~ etag                   = "dcb886169e66554423497a0b6bc333c0" -> "8fabe4dfc0ff1fd88b7e82d25ee55872"
      ~ id                     = "regeneration_path.zip" -> (known after apply)
      + kms_key_id             = (known after apply)
      - metadata               = {} -> null
      ~ server_side_encryption = "AES256" -> (known after apply)
      ~ storage_class          = "STANDARD" -> (known after apply)
      - tags                   = {} -> null
      ~ tags_all               = {} -> (known after apply)
      + version_id             = (known after apply)
        # (4 unchanged attributes hidden)
    }

Plan: 51 to add, 1 to change, 51 to destroy.
